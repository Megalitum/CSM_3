import numpy as np


def framing_lstsq(X, y):
    """
    Compute Framing Least Squares

    Returns
    -------
    theta
    rss
    """

    n, m = X.shape
    a = np.zeros((1, 1))
    H = np.zeros((1, 1))
    H[0][0] = 1. / np.dot(X[:, :1].T, X[:, :1])[0][0]
    beta = np.dot(X[:, :1].T, X[:, :1])
    eta =  np.dot(X[:, :1].T, X[:, :1])
    theta = np.array([[np.dot(X[:, :1].T, y) / np.dot(X[:, :1].T, X[:, :1])]])

    rss = np.zeros((1, m))
    rss[0][0] = np.dot(y.T, y - np.reshape((theta * X[:, :1]), (n, )))
    #rss[1][0] = rss[0][0] + 2
    #rss[2][0] = rss[0][0] / (n + 1) * (n - 1)

    for s in range(1, m):
        h = np.dot(X[:, :s].T, X[:, s:s + 1])
        a = np.dot(H, h)
        eta = np.dot(X[:, s:s + 1].T, X[:, s:s + 1])
        beta = eta - np.dot(h.T, a)
        gamma = np.dot(X[:, s:s + 1].T, y)
        t = (gamma - np.dot(h.T, theta)) / beta
        theta_star = theta - t * a
        H = (np.vstack((np.hstack((H + 1. / beta * np.dot(a, a.T), -1. / beta * a)),
                        np.hstack((-1. / beta * a.T, 1. / beta))))).reshape((s + 1, s + 1))
        theta = (np.vstack((theta_star, t))).reshape((s + 1, 1))

        rss[0][s] = rss[0][s - 1] - t * t * beta
        #rss[1][s] = rss[0][s] + 2 * (s + 1)
        #rss[2][s] = rss[0][s] * (n + s + 1) / (n - s - 1)

    return np.reshape(theta, (m,)), rss

#X = np.transpose(np.array([np.array([1] * 5), np.arange(5)]))
#y = X[:, 0] + X[:, 1]
def test1():
    X = np.identity(4)
    for i in range(4):
        X[i,0] = 1
    y = np.arange(4)

    print(X)
    theta, rss = framing_lstsq(X, y)
    print('theta',theta)
    print('X,theta', np.dot(X, theta))
    print('rss',rss)

def test2():
    X =[[ 0.3416357,   0.91666297,  0.31241826,  0.97328671,  0.96317608],
     [ 0.20416123,  0.44784476,  0.4821868 ,  0.81172781,  0.19336936],
     [ 0.13452354,  0.0490654 ,  0.17725703,  0.20605951, 0.20923917],
     [ 0.27476937,  0.91833758,  0.61128976,  0.83985803, 0.57488956],
     [ 0.56865222,  0.14990463,  0.23792511,  0.59921989,  0.21404969],
     [ 0.14795954,  0.15902646,  0.84449577,  0.06858441,  0.52588919],
     [ 0.1493088 ,  0.78133172,  0.72910794,  0.93803208,  0.79454572],
     [ 0.42664281,  0.93353571,  0.23602391,  0.79261407,  0.9226899 ],
     [ 0.30026069,  0.72895612,  0.776482  ,  0.35491825,  0.26115706],
     [ 0.04690544,  0.10732925,  0.91344586,  0.45750003,  0.46106102]]
    y = [ 0.3416357,   0.20416123,  0.13452354,  0.27476937,  0.56865222,  0.14795954,
      0.1493088,   0.42664281,  0.30026069,  0.04690544]
    X = np.array(X)
    y = np.array(y)
    print(X)
    theta, rss = framing_lstsq(X, y)
    print('theta',theta)
    print('X,theta', np.dot(X, theta))
    print('rss',rss)

def test3():
    X = np.array([[0.933135730082 , 0.625404794701 , 0.660761750959 , 0.610317936628 , 0.885107397765 ], [ 
     0.5381071055 , 0.646401212407 , 0.377985196028 , 0.731347079803 , 0.831541659222 ], [
     0.928512835215 , 0.738504631248 , 0.167361631144 , 0.966357276102 , 0.478752704394 ], [
     0.758965221669 , 0.624663372663 , 0.265842780305 , 0.161620327991 , 0.131113946218 ], [
     0.659126781595 , 0.479601401974 , 0.46700498255 , 0.103217980945 , 0.0300524328253 ], [
     0.744223277988 , 0.49626857413 , 0.162057538887 , 0.806796103868 , 0.80064246322 ], [
     0.224409296927 , 0.209428479539 , 0.566008370993 , 0.256524796562 , 0.167507864444 ], [
     0.309705227608 , 0.246566824921 , 0.268183907744 , 0.0521076394928 , 0.13648054011 ], [
     0.336016338102 , 0.0494131409056 , 0.437393032593 , 0.414128883248 , 0.519698736493 ], [
     0.386803921754 , 0.486618115839 , 0.882845901723 , 0.0332311636344 , 0.935696021613 ]])

    y = np.array([2.2093593518 ,0.699504087712 ,1.47589087429 , 1.29341169998 , 1.48518252339 ,1.40219022459 ,\
                  0.820379302695 ,0.704165940727 , 1.34661576509 ,1.07002143531])
    theta, rss = framing_lstsq(X, y)
    print('theta',theta)
    print('X,theta', np.dot(X, theta))
    print('rss',rss)

test3()